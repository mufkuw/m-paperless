import ntlk
import ntlk;
quit
quit()
help
help()
q
from documents.models import CustomFieldInstance
cfi = CustomFieldInstance.object.all()
cfi = CustomFieldInstance.objects.all()
cfi
cfi.filter(id_custom_field=2)
cfi.filter(field=2)
cfi.filter(field=1)
cfi.filter(field=3)
cfi.filter(field=3).first()
cfi.filter(field=3).first().serialize()
cfi.filter(field=3).first().to_json()
cfi.filter(field=3).first()
cfi.filter(field=1)
cfi.filter(field=2)
cfi.filter(field=2).value
filtered=cfi.filter(field=2)
for item in filtered:
	print(item)
filtered=cfi.filter(field=2).distinct()
for item in filtered:
	print(item)
filtered=cfi.filter(field=2).distinct()
filtered
filtered=cfi.filter(field=2).values('value').distinct()
filtered=cfi.filter(field=2).values('value_text').distinct()
filtered
for item in filtered:
	print(item)
	print(item['value_text'])
for item in filtered:
	print(item['value_text'])
filtered=cfi.filter(field=2).values('value_text').distinct()
filtered
filtered=cfi.filter(field=2).values('value_text')
filtered
filtered=cfi.filter(field=2).value_list('value_text',flat=true)
filtered=cfi.filter(field=2).values_list('value_text',flat=true)
filtered=cfi.filter(field=2).values_list('value_text',flat=True)
filtered
filtered=cfi.filter(field=2).values_list('value_text',flat=True).distinct()
filtered
filtered=set(cfi.filter(field=2).values_list('value_text',flat=True).distinct())
filtered
filtered=set(cfi.filter(field=2).values_list('value',flat=True).distinct())
filtered=set(cfi.filter(field=2))
filtered
filtered=set(cfi.filter(field=2)).each()
filtered=cfi.filter(field=2).each()
filtered=cfi.filter(field=2).first()
filtered.value
filtered=cfi.filter(field=2).first().value
filterd
filtered
filtered=cfi.filter(field=2).annotate(value)
filtered=cfi.filter(field=2).annotate()
filtered
filtered=cfi.filter(field=2).values('value')
filtered=cfi.filter(field=2).values_list('value')
filtered=cfi.filter(field=2).value
filtered=cfi.filter(field=2).value()
filtered=cfi.filter(field=2).map()
filtered=cfi.filter(field=2).select()
filtered=cfi.filter(field=2).values('field')
filtered
filtered=cfi.filter(field=2).values('value')
filtered=cfi.filter(field=2).values(F('value'))
exit
exit()
CustomFieldInstance.objects.filtered(field=2)
from documents.models import CustomFieldInstance
values = CustomFieldInstance.objects.filtered(field=2)
values = CustomFieldInstance.objects.all().filtered(field=2)
values = CustomFieldInstance.objects.filter(field=2)
values
values = [item for item in CustomFieldInstance.objects.filter(field=2) item.value]
values = [item for item in CustomFieldInstance.objects.filter(field=2)]
values
values = [item.value for item in CustomFieldInstance.objects.filter(field=2)]
valus
valuss
values
values = [item.value for item in CustomFieldInstance.objects.filter(field=2)].distinct()
values = (item.value for item in CustomFieldInstance.objects.filter(field=2))
values
values = set(item.value for item in CustomFieldInstance.objects.filter(field=2))
values
quit
quit()
view.reverse_action()
quit()
from documents.models import CustomFieldInstance
filtered_distinct_values = json.dump(list(item.value for item in CustomFieldInstance.objects.filter(field=field)))
filtered_distinct_values = json.dump(list(item.value for item in CustomFieldInstance.objects.filter(field=1)))
import json
filtered_distinct_values = json.dump(list(item.value for item in CustomFieldInstance.objects.filter(field=1)))
help(json.dump)
filtered_distinct_values = list(item.value for item in CustomFieldInstance.objects.filter(field=1))
filtere_distinct_vaues
filtere_distinct_values
filtered_distinct_values
filtered_distinct_values = list(item.value for item in CustomFieldInstance.objects.filter(field=2))
filtered_distinct_values
filtered_distinct_values = list(set(item.value for item in CustomFieldInstance.objects.filter(field=2)))
filtered_distinct_values
json.dump(filtered_distinct_values)
json.dump(filtered_distinct_values,fp)
json.dumps(filtered_distinct_values,fp)
json.dumps(filtered_distinct_values)
quit()
from documents.models import CustomFieldInstance
filtered_distinct_values = [item.value for item in CustomFieldInstance.objects.filter(field=field)]
filtered_distinct_values = [item.value for item in CustomFieldInstance.objects.filter(field=1)]
filtered_distinct_values
filtered_distinct_values = [item for item in CustomFieldInstance.objects.filter(field=)]
filtered_distinct_values = [item for item in CustomFieldInstance.objects.filter(field=1)]
f = [item for item in CustomFieldInstance.objects.filter(field=1)]
f
from documents.models import CustomField
f = [item for item in CustomFieldInstance.objects.filter(field=1,data_type=CustomField.FieldDataType.STRING)]
F
f
f = [item for item in CustomFieldInstance.objects.filter(field=1 && data_type=CustomField.FieldDataType.STRING)]
[item for item in CustomFieldInstance.objects.filter(field=1)
[item for item in CustomFieldInstance.objects.filter(field=1)]
[item for item in CustomFieldInstance.objects.filter(field=1,data_type=CustomField.FieldDataType.STRING)]
[item for item in CustomFieldInstance.objects.filter(data_type=CustomField.FieldDataType.STRING)]
[item for item in CustomFieldInstance.objects.filter(data_type=('string',_('String')))]
[item for item in CustomFieldInstance.objects.filter(data_type='string'))]
[item for item in CustomFieldInstance.objects.filter(data_type='string')]
[item for item in CustomFieldInstance.objects.all().filter(['field=1'])
]
[item for item in CustomFieldInstance.objects.all()]
[item.field,item.data_type for item in CustomFieldInstance.objects.all()]
[(item.field,item.data_type) for item in CustomFieldInstance.objects.all()]
[(item.field,item.field.data_type) for item in CustomFieldInstance.objects.all()]
[item.value for item in CustomFieldInstance.objects.filter(field=1, field.data_type='string')]
[item.value for item in CustomFieldInstance.objects.filter(field=1, data_type='string')]
[item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type='string']
[item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type=='string']
[item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string']
[item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type!=[]]
set([item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type!=[]])
set([item.value for item in CustomFieldInstance.objects.filter(field=3) if item.field.data_type!=[]])
set([item.value for item in CustomFieldInstance.objects.filter(field=3) if item.field.data_type!=[] or item.value!=None])
set([item.value for item in CustomFieldInstance.objects.filter(field=3) if item.field.data_type!=[] and item.value!=None])
set([item.value for item in CustomFieldInstance.objects.filter(field=3) if item.field.data_type!=[] and item.value!=None and item.value!=()])
set([item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type!=[] and item.value!=None and item.value!=()])
[item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type!=[] and item.value!=None and item.value!=()]
[item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type!=[] or item.value!=None or item.value!=()]
[item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type=='string']
[item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string']
set([item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string'])
set([item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type=='string'])
quit(
quit()
from document.models import CustomFieldInstance
from documents.models import CustomFieldInstance
set([item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type=='string'])
set([item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string'])
set([item.value for item in CustomFieldInstance.objects.filter(field=field) if item.field.data_type=='string'])
set([item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type=='string'])
set([item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string'])
list(set([item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string']))
list(set([item.value for item in CustomFieldInstance.objects.filter(field=1) if item.field.data_type=='string']))
list(set([item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string']))
list(set([item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string' and item.field!=None]))
list(set([item.value for item in CustomFieldInstance.objects.filter(field=2) if item.field.data_type=='string' and item.value!=None]))
quit()
import nltk
nltk.download('punkt')
quit
quit()
